// Code generated by github.com/whyrusleeping/cbor-gen. DO NOT EDIT.

package datamodel

import (
	"fmt"
	"io"
	"math"
	"sort"

	cid "github.com/ipfs/go-cid"
	cbg "github.com/whyrusleeping/cbor-gen"
	xerrors "golang.org/x/xerrors"
)

var _ = xerrors.Errorf
var _ = cid.Undef
var _ = math.E
var _ = sort.Sort

func (t *TokenPayloadModel1_0_0_rc1) MarshalCBOR(w io.Writer) error {
	if t == nil {
		_, err := w.Write(cbg.CborNull)
		return err
	}

	cw := cbg.NewCborWriter(w)

	if _, err := cw.Write([]byte{161}); err != nil {
		return err
	}

	// t.Iss (did.DID) (struct)
	if len("iss") > 8192 {
		return xerrors.Errorf("Value in field \"iss\" was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len("iss"))); err != nil {
		return err
	}
	if _, err := cw.WriteString(string("iss")); err != nil {
		return err
	}

	if err := t.Iss.MarshalCBOR(cw); err != nil {
		return err
	}
	return nil
}

func (t *TokenPayloadModel1_0_0_rc1) UnmarshalCBOR(r io.Reader) (err error) {
	*t = TokenPayloadModel1_0_0_rc1{}

	cr := cbg.NewCborReader(r)

	maj, extra, err := cr.ReadHeader()
	if err != nil {
		return err
	}
	defer func() {
		if err == io.EOF {
			err = io.ErrUnexpectedEOF
		}
	}()

	if maj != cbg.MajMap {
		return fmt.Errorf("cbor input should be of type map")
	}

	if extra > cbg.MaxLength {
		return fmt.Errorf("TokenPayloadModel1_0_0_rc1: map struct too large (%d)", extra)
	}

	n := extra

	nameBuf := make([]byte, 3)
	for i := uint64(0); i < n; i++ {
		nameLen, ok, err := cbg.ReadFullStringIntoBuf(cr, nameBuf, 8192)
		if err != nil {
			return err
		}

		if !ok {
			// Field doesn't exist on this type, so ignore it
			if err := cbg.ScanForLinks(cr, func(cid.Cid) {}); err != nil {
				return err
			}
			continue
		}

		switch string(nameBuf[:nameLen]) {
		// t.Iss (did.DID) (struct)
		case "iss":

			{

				if err := t.Iss.UnmarshalCBOR(cr); err != nil {
					return xerrors.Errorf("unmarshaling t.Iss: %w", err)
				}

			}

		default:
			// Field doesn't exist on this type, so ignore it
			if err := cbg.ScanForLinks(r, func(cid.Cid) {}); err != nil {
				return err
			}
		}
	}

	return nil
}
func (t *SigPayloadModel) MarshalCBOR(w io.Writer) error {
	if t == nil {
		_, err := w.Write(cbg.CborNull)
		return err
	}

	cw := cbg.NewCborWriter(w)
	fieldCount := 2

	if t.TokenPayload1_0_0_rc1 == nil {
		fieldCount--
	}

	if _, err := cw.Write(cbg.CborEncodeMajorType(cbg.MajMap, uint64(fieldCount))); err != nil {
		return err
	}

	// t.Header ([]uint8) (slice)
	if len("h") > 8192 {
		return xerrors.Errorf("Value in field \"h\" was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len("h"))); err != nil {
		return err
	}
	if _, err := cw.WriteString(string("h")); err != nil {
		return err
	}

	if len(t.Header) > 2097152 {
		return xerrors.Errorf("Byte array in field t.Header was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajByteString, uint64(len(t.Header))); err != nil {
		return err
	}

	if _, err := cw.Write(t.Header); err != nil {
		return err
	}

	// t.TokenPayload1_0_0_rc1 (datamodel.TokenPayloadModel1_0_0_rc1) (struct)
	if t.TokenPayload1_0_0_rc1 != nil {

		if len("ucan/inv@1.0.0-rc.1") > 8192 {
			return xerrors.Errorf("Value in field \"ucan/inv@1.0.0-rc.1\" was too long")
		}

		if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len("ucan/inv@1.0.0-rc.1"))); err != nil {
			return err
		}
		if _, err := cw.WriteString(string("ucan/inv@1.0.0-rc.1")); err != nil {
			return err
		}

		if err := t.TokenPayload1_0_0_rc1.MarshalCBOR(cw); err != nil {
			return err
		}
	}
	return nil
}

func (t *SigPayloadModel) UnmarshalCBOR(r io.Reader) (err error) {
	*t = SigPayloadModel{}

	cr := cbg.NewCborReader(r)

	maj, extra, err := cr.ReadHeader()
	if err != nil {
		return err
	}
	defer func() {
		if err == io.EOF {
			err = io.ErrUnexpectedEOF
		}
	}()

	if maj != cbg.MajMap {
		return fmt.Errorf("cbor input should be of type map")
	}

	if extra > cbg.MaxLength {
		return fmt.Errorf("SigPayloadModel: map struct too large (%d)", extra)
	}

	n := extra

	nameBuf := make([]byte, 19)
	for i := uint64(0); i < n; i++ {
		nameLen, ok, err := cbg.ReadFullStringIntoBuf(cr, nameBuf, 8192)
		if err != nil {
			return err
		}

		if !ok {
			// Field doesn't exist on this type, so ignore it
			if err := cbg.ScanForLinks(cr, func(cid.Cid) {}); err != nil {
				return err
			}
			continue
		}

		switch string(nameBuf[:nameLen]) {
		// t.Header ([]uint8) (slice)
		case "h":

			maj, extra, err = cr.ReadHeader()
			if err != nil {
				return err
			}

			if extra > 2097152 {
				return fmt.Errorf("t.Header: byte array too large (%d)", extra)
			}
			if maj != cbg.MajByteString {
				return fmt.Errorf("expected byte array")
			}

			if extra > 0 {
				t.Header = make([]uint8, extra)
			}

			if _, err := io.ReadFull(cr, t.Header); err != nil {
				return err
			}

			// t.TokenPayload1_0_0_rc1 (datamodel.TokenPayloadModel1_0_0_rc1) (struct)
		case "ucan/inv@1.0.0-rc.1":

			{

				b, err := cr.ReadByte()
				if err != nil {
					return err
				}
				if b != cbg.CborNull[0] {
					if err := cr.UnreadByte(); err != nil {
						return err
					}
					t.TokenPayload1_0_0_rc1 = new(TokenPayloadModel1_0_0_rc1)
					if err := t.TokenPayload1_0_0_rc1.UnmarshalCBOR(cr); err != nil {
						return xerrors.Errorf("unmarshaling t.TokenPayload1_0_0_rc1 pointer: %w", err)
					}
				}

			}

		default:
			// Field doesn't exist on this type, so ignore it
			if err := cbg.ScanForLinks(r, func(cid.Cid) {}); err != nil {
				return err
			}
		}
	}

	return nil
}
