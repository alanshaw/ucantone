// Code generated by github.com/whyrusleeping/cbor-gen. DO NOT EDIT.

package helpers

import (
	"fmt"
	"io"
	"math"
	"sort"

	cid "github.com/ipfs/go-cid"
	cbg "github.com/whyrusleeping/cbor-gen"
	xerrors "golang.org/x/xerrors"
)

var _ = xerrors.Errorf
var _ = cid.Undef
var _ = math.E
var _ = sort.Sort

func (t *TestArgs) MarshalCBOR(w io.Writer) error {
	if t == nil {
		_, err := w.Write(cbg.CborNull)
		return err
	}

	cw := cbg.NewCborWriter(w)

	if _, err := cw.Write([]byte{168}); err != nil {
		return err
	}

	// t.ID (did.DID) (struct)
	if len("id") > 8192 {
		return xerrors.Errorf("Value in field \"id\" was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len("id"))); err != nil {
		return err
	}
	if _, err := cw.WriteString(string("id")); err != nil {
		return err
	}

	if err := t.ID.MarshalCBOR(cw); err != nil {
		return err
	}

	// t.Num (int64) (int64)
	if len("num") > 8192 {
		return xerrors.Errorf("Value in field \"num\" was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len("num"))); err != nil {
		return err
	}
	if _, err := cw.WriteString(string("num")); err != nil {
		return err
	}

	if t.Num >= 0 {
		if err := cw.WriteMajorTypeHeader(cbg.MajUnsignedInt, uint64(t.Num)); err != nil {
			return err
		}
	} else {
		if err := cw.WriteMajorTypeHeader(cbg.MajNegativeInt, uint64(-t.Num-1)); err != nil {
			return err
		}
	}

	// t.Obj (helpers.TestObject) (struct)
	if len("obj") > 8192 {
		return xerrors.Errorf("Value in field \"obj\" was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len("obj"))); err != nil {
		return err
	}
	if _, err := cw.WriteString(string("obj")); err != nil {
		return err
	}

	if err := t.Obj.MarshalCBOR(cw); err != nil {
		return err
	}

	// t.Str (string) (string)
	if len("str") > 8192 {
		return xerrors.Errorf("Value in field \"str\" was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len("str"))); err != nil {
		return err
	}
	if _, err := cw.WriteString(string("str")); err != nil {
		return err
	}

	if len(t.Str) > 8192 {
		return xerrors.Errorf("Value in field t.Str was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len(t.Str))); err != nil {
		return err
	}
	if _, err := cw.WriteString(string(t.Str)); err != nil {
		return err
	}

	// t.Link (cid.Cid) (struct)
	if len("link") > 8192 {
		return xerrors.Errorf("Value in field \"link\" was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len("link"))); err != nil {
		return err
	}
	if _, err := cw.WriteString(string("link")); err != nil {
		return err
	}

	if err := cbg.WriteCid(cw, t.Link); err != nil {
		return xerrors.Errorf("failed to write cid field t.Link: %w", err)
	}

	// t.List ([]string) (slice)
	if len("list") > 8192 {
		return xerrors.Errorf("Value in field \"list\" was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len("list"))); err != nil {
		return err
	}
	if _, err := cw.WriteString(string("list")); err != nil {
		return err
	}

	if len(t.List) > 8192 {
		return xerrors.Errorf("Slice value in field t.List was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajArray, uint64(len(t.List))); err != nil {
		return err
	}
	for _, v := range t.List {
		if len(v) > 8192 {
			return xerrors.Errorf("Value in field v was too long")
		}

		if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len(v))); err != nil {
			return err
		}
		if _, err := cw.WriteString(string(v)); err != nil {
			return err
		}

	}

	// t.Obj2 (helpers.TestObject2) (struct)
	if len("obj2") > 8192 {
		return xerrors.Errorf("Value in field \"obj2\" was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len("obj2"))); err != nil {
		return err
	}
	if _, err := cw.WriteString(string("obj2")); err != nil {
		return err
	}

	if err := t.Obj2.MarshalCBOR(cw); err != nil {
		return err
	}

	// t.Bytes ([]uint8) (slice)
	if len("bytes") > 8192 {
		return xerrors.Errorf("Value in field \"bytes\" was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len("bytes"))); err != nil {
		return err
	}
	if _, err := cw.WriteString(string("bytes")); err != nil {
		return err
	}

	if len(t.Bytes) > 2097152 {
		return xerrors.Errorf("Byte array in field t.Bytes was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajByteString, uint64(len(t.Bytes))); err != nil {
		return err
	}

	if _, err := cw.Write(t.Bytes); err != nil {
		return err
	}

	return nil
}

func (t *TestArgs) UnmarshalCBOR(r io.Reader) (err error) {
	*t = TestArgs{}

	cr := cbg.NewCborReader(r)

	maj, extra, err := cr.ReadHeader()
	if err != nil {
		return err
	}
	defer func() {
		if err == io.EOF {
			err = io.ErrUnexpectedEOF
		}
	}()

	if maj != cbg.MajMap {
		return fmt.Errorf("cbor input should be of type map")
	}

	if extra > cbg.MaxLength {
		return fmt.Errorf("TestArgs: map struct too large (%d)", extra)
	}

	n := extra

	nameBuf := make([]byte, 5)
	for i := uint64(0); i < n; i++ {
		nameLen, ok, err := cbg.ReadFullStringIntoBuf(cr, nameBuf, 8192)
		if err != nil {
			return err
		}

		if !ok {
			// Field doesn't exist on this type, so ignore it
			if err := cbg.ScanForLinks(cr, func(cid.Cid) {}); err != nil {
				return err
			}
			continue
		}

		switch string(nameBuf[:nameLen]) {
		// t.ID (did.DID) (struct)
		case "id":

			{

				if err := t.ID.UnmarshalCBOR(cr); err != nil {
					return xerrors.Errorf("unmarshaling t.ID: %w", err)
				}

			}
			// t.Num (int64) (int64)
		case "num":
			{
				maj, extra, err := cr.ReadHeader()
				if err != nil {
					return err
				}
				var extraI int64
				switch maj {
				case cbg.MajUnsignedInt:
					extraI = int64(extra)
					if extraI < 0 {
						return fmt.Errorf("int64 positive overflow")
					}
				case cbg.MajNegativeInt:
					extraI = int64(extra)
					if extraI < 0 {
						return fmt.Errorf("int64 negative overflow")
					}
					extraI = -1 - extraI
				default:
					return fmt.Errorf("wrong type for int64 field: %d", maj)
				}

				t.Num = int64(extraI)
			}
			// t.Obj (helpers.TestObject) (struct)
		case "obj":

			{

				if err := t.Obj.UnmarshalCBOR(cr); err != nil {
					return xerrors.Errorf("unmarshaling t.Obj: %w", err)
				}

			}
			// t.Str (string) (string)
		case "str":

			{
				sval, err := cbg.ReadStringWithMax(cr, 8192)
				if err != nil {
					return err
				}

				t.Str = string(sval)
			}
			// t.Link (cid.Cid) (struct)
		case "link":

			{

				c, err := cbg.ReadCid(cr)
				if err != nil {
					return xerrors.Errorf("failed to read cid field t.Link: %w", err)
				}

				t.Link = c

			}
			// t.List ([]string) (slice)
		case "list":

			maj, extra, err = cr.ReadHeader()
			if err != nil {
				return err
			}

			if extra > 8192 {
				return fmt.Errorf("t.List: array too large (%d)", extra)
			}

			if maj != cbg.MajArray {
				return fmt.Errorf("expected cbor array")
			}

			if extra > 0 {
				t.List = make([]string, extra)
			}

			for i := 0; i < int(extra); i++ {
				{
					var maj byte
					var extra uint64
					var err error
					_ = maj
					_ = extra
					_ = err

					{
						sval, err := cbg.ReadStringWithMax(cr, 8192)
						if err != nil {
							return err
						}

						t.List[i] = string(sval)
					}

				}
			}
			// t.Obj2 (helpers.TestObject2) (struct)
		case "obj2":

			{

				if err := t.Obj2.UnmarshalCBOR(cr); err != nil {
					return xerrors.Errorf("unmarshaling t.Obj2: %w", err)
				}

			}
			// t.Bytes ([]uint8) (slice)
		case "bytes":

			maj, extra, err = cr.ReadHeader()
			if err != nil {
				return err
			}

			if extra > 2097152 {
				return fmt.Errorf("t.Bytes: byte array too large (%d)", extra)
			}
			if maj != cbg.MajByteString {
				return fmt.Errorf("expected byte array")
			}

			if extra > 0 {
				t.Bytes = make([]uint8, extra)
			}

			if _, err := io.ReadFull(cr, t.Bytes); err != nil {
				return err
			}

		default:
			// Field doesn't exist on this type, so ignore it
			if err := cbg.ScanForLinks(r, func(cid.Cid) {}); err != nil {
				return err
			}
		}
	}

	return nil
}
func (t *TestObject) MarshalCBOR(w io.Writer) error {
	if t == nil {
		_, err := w.Write(cbg.CborNull)
		return err
	}

	cw := cbg.NewCborWriter(w)

	if _, err := cw.Write([]byte{161}); err != nil {
		return err
	}

	// t.Bytes ([]uint8) (slice)
	if len("bytes") > 8192 {
		return xerrors.Errorf("Value in field \"bytes\" was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len("bytes"))); err != nil {
		return err
	}
	if _, err := cw.WriteString(string("bytes")); err != nil {
		return err
	}

	if len(t.Bytes) > 2097152 {
		return xerrors.Errorf("Byte array in field t.Bytes was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajByteString, uint64(len(t.Bytes))); err != nil {
		return err
	}

	if _, err := cw.Write(t.Bytes); err != nil {
		return err
	}

	return nil
}

func (t *TestObject) UnmarshalCBOR(r io.Reader) (err error) {
	*t = TestObject{}

	cr := cbg.NewCborReader(r)

	maj, extra, err := cr.ReadHeader()
	if err != nil {
		return err
	}
	defer func() {
		if err == io.EOF {
			err = io.ErrUnexpectedEOF
		}
	}()

	if maj != cbg.MajMap {
		return fmt.Errorf("cbor input should be of type map")
	}

	if extra > cbg.MaxLength {
		return fmt.Errorf("TestObject: map struct too large (%d)", extra)
	}

	n := extra

	nameBuf := make([]byte, 5)
	for i := uint64(0); i < n; i++ {
		nameLen, ok, err := cbg.ReadFullStringIntoBuf(cr, nameBuf, 8192)
		if err != nil {
			return err
		}

		if !ok {
			// Field doesn't exist on this type, so ignore it
			if err := cbg.ScanForLinks(cr, func(cid.Cid) {}); err != nil {
				return err
			}
			continue
		}

		switch string(nameBuf[:nameLen]) {
		// t.Bytes ([]uint8) (slice)
		case "bytes":

			maj, extra, err = cr.ReadHeader()
			if err != nil {
				return err
			}

			if extra > 2097152 {
				return fmt.Errorf("t.Bytes: byte array too large (%d)", extra)
			}
			if maj != cbg.MajByteString {
				return fmt.Errorf("expected byte array")
			}

			if extra > 0 {
				t.Bytes = make([]uint8, extra)
			}

			if _, err := io.ReadFull(cr, t.Bytes); err != nil {
				return err
			}

		default:
			// Field doesn't exist on this type, so ignore it
			if err := cbg.ScanForLinks(r, func(cid.Cid) {}); err != nil {
				return err
			}
		}
	}

	return nil
}
func (t *TestObject2) MarshalCBOR(w io.Writer) error {
	if t == nil {
		_, err := w.Write(cbg.CborNull)
		return err
	}

	cw := cbg.NewCborWriter(w)

	if _, err := cw.Write([]byte{162}); err != nil {
		return err
	}

	// t.Str (string) (string)
	if len("str") > 8192 {
		return xerrors.Errorf("Value in field \"str\" was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len("str"))); err != nil {
		return err
	}
	if _, err := cw.WriteString(string("str")); err != nil {
		return err
	}

	if len(t.Str) > 8192 {
		return xerrors.Errorf("Value in field t.Str was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len(t.Str))); err != nil {
		return err
	}
	if _, err := cw.WriteString(string(t.Str)); err != nil {
		return err
	}

	// t.Bytes ([]uint8) (slice)
	if len("bytes") > 8192 {
		return xerrors.Errorf("Value in field \"bytes\" was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len("bytes"))); err != nil {
		return err
	}
	if _, err := cw.WriteString(string("bytes")); err != nil {
		return err
	}

	if len(t.Bytes) > 2097152 {
		return xerrors.Errorf("Byte array in field t.Bytes was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajByteString, uint64(len(t.Bytes))); err != nil {
		return err
	}

	if _, err := cw.Write(t.Bytes); err != nil {
		return err
	}

	return nil
}

func (t *TestObject2) UnmarshalCBOR(r io.Reader) (err error) {
	*t = TestObject2{}

	cr := cbg.NewCborReader(r)

	maj, extra, err := cr.ReadHeader()
	if err != nil {
		return err
	}
	defer func() {
		if err == io.EOF {
			err = io.ErrUnexpectedEOF
		}
	}()

	if maj != cbg.MajMap {
		return fmt.Errorf("cbor input should be of type map")
	}

	if extra > cbg.MaxLength {
		return fmt.Errorf("TestObject2: map struct too large (%d)", extra)
	}

	n := extra

	nameBuf := make([]byte, 5)
	for i := uint64(0); i < n; i++ {
		nameLen, ok, err := cbg.ReadFullStringIntoBuf(cr, nameBuf, 8192)
		if err != nil {
			return err
		}

		if !ok {
			// Field doesn't exist on this type, so ignore it
			if err := cbg.ScanForLinks(cr, func(cid.Cid) {}); err != nil {
				return err
			}
			continue
		}

		switch string(nameBuf[:nameLen]) {
		// t.Str (string) (string)
		case "str":

			{
				sval, err := cbg.ReadStringWithMax(cr, 8192)
				if err != nil {
					return err
				}

				t.Str = string(sval)
			}
			// t.Bytes ([]uint8) (slice)
		case "bytes":

			maj, extra, err = cr.ReadHeader()
			if err != nil {
				return err
			}

			if extra > 2097152 {
				return fmt.Errorf("t.Bytes: byte array too large (%d)", extra)
			}
			if maj != cbg.MajByteString {
				return fmt.Errorf("expected byte array")
			}

			if extra > 0 {
				t.Bytes = make([]uint8, extra)
			}

			if _, err := io.ReadFull(cr, t.Bytes); err != nil {
				return err
			}

		default:
			// Field doesn't exist on this type, so ignore it
			if err := cbg.ScanForLinks(r, func(cid.Cid) {}); err != nil {
				return err
			}
		}
	}

	return nil
}
