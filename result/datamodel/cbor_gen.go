// Code generated by github.com/whyrusleeping/cbor-gen. DO NOT EDIT.

package datamodel

import (
	"fmt"
	"io"
	"math"
	"sort"

	cid "github.com/ipfs/go-cid"
	cbg "github.com/whyrusleeping/cbor-gen"
	xerrors "golang.org/x/xerrors"
)

var _ = xerrors.Errorf
var _ = cid.Undef
var _ = math.E
var _ = sort.Sort

func (t *ResultModel) MarshalCBOR(w io.Writer) error {
	if t == nil {
		_, err := w.Write(cbg.CborNull)
		return err
	}

	cw := cbg.NewCborWriter(w)
	fieldCount := 2

	if t.Ok == nil {
		fieldCount--
	}

	if t.Err == nil {
		fieldCount--
	}

	if _, err := cw.Write(cbg.CborEncodeMajorType(cbg.MajMap, uint64(fieldCount))); err != nil {
		return err
	}

	// t.Ok (typegen.Deferred) (struct)
	if t.Ok != nil {

		if len("ok") > 8192 {
			return xerrors.Errorf("Value in field \"ok\" was too long")
		}

		if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len("ok"))); err != nil {
			return err
		}
		if _, err := cw.WriteString(string("ok")); err != nil {
			return err
		}

		if err := t.Ok.MarshalCBOR(cw); err != nil {
			return err
		}
	}

	// t.Err (typegen.Deferred) (struct)
	if t.Err != nil {

		if len("error") > 8192 {
			return xerrors.Errorf("Value in field \"error\" was too long")
		}

		if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len("error"))); err != nil {
			return err
		}
		if _, err := cw.WriteString(string("error")); err != nil {
			return err
		}

		if err := t.Err.MarshalCBOR(cw); err != nil {
			return err
		}
	}
	return nil
}

func (t *ResultModel) UnmarshalCBOR(r io.Reader) (err error) {
	*t = ResultModel{}

	cr := cbg.NewCborReader(r)

	maj, extra, err := cr.ReadHeader()
	if err != nil {
		return err
	}
	defer func() {
		if err == io.EOF {
			err = io.ErrUnexpectedEOF
		}
	}()

	if maj != cbg.MajMap {
		return fmt.Errorf("cbor input should be of type map")
	}

	if extra > cbg.MaxLength {
		return fmt.Errorf("ResultModel: map struct too large (%d)", extra)
	}

	n := extra

	nameBuf := make([]byte, 5)
	for i := uint64(0); i < n; i++ {
		nameLen, ok, err := cbg.ReadFullStringIntoBuf(cr, nameBuf, 8192)
		if err != nil {
			return err
		}

		if !ok {
			// Field doesn't exist on this type, so ignore it
			if err := cbg.ScanForLinks(cr, func(cid.Cid) {}); err != nil {
				return err
			}
			continue
		}

		switch string(nameBuf[:nameLen]) {
		// t.Ok (typegen.Deferred) (struct)
		case "ok":

			{

				t.Ok = new(cbg.Deferred)

				if err := t.Ok.UnmarshalCBOR(cr); err != nil {
					return xerrors.Errorf("failed to read deferred field: %w", err)
				}
			}
			// t.Err (typegen.Deferred) (struct)
		case "error":

			{

				t.Err = new(cbg.Deferred)

				if err := t.Err.UnmarshalCBOR(cr); err != nil {
					return xerrors.Errorf("failed to read deferred field: %w", err)
				}
			}

		default:
			// Field doesn't exist on this type, so ignore it
			if err := cbg.ScanForLinks(r, func(cid.Cid) {}); err != nil {
				return err
			}
		}
	}

	return nil
}
